package edu.ucsd.cse.eulexia;

import com.google.android.glass.app.Card;
import com.google.android.glass.content.Intents;
import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;
import com.google.android.glass.touchpad.*;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.graphics.drawable.Drawable;
import android.media.AudioManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.view.MotionEvent;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.TextView;
import android.graphics.Typeface;
import android.view.KeyEvent;
import android.util.Log;
import android.provider.MediaStore;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import android.content.Intent;
import android.net.Uri;
import android.os.FileObserver;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONArray;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p/>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class OCRActivity extends Activity {

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;
    private ProgressDialog mProgressDialog;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;

    private GestureDetector mGestureDetector;

    private CameraView mCameraView;

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_CAMERA) {
            // Stop the preview and release the camera.
            // Execute your logic as quickly as possible
            // so the capture happens quickly.
            return false;
        } else {
            return super.onKeyDown(keyCode, event);
        }
    }

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        mView = buildView();
        mGestureDetector = createGestureDetector(this);
        mProgressDialog = new ProgressDialog(this);
        mProgressDialog.getWindow().addFlags( WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON );
        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
        mProgressDialog.setTitle("Loading...");
        mProgressDialog.setCancelable(false);
        mProgressDialog.setIndeterminate(false);
        mProgressDialog.setMax(100);
        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });

        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                // Plays disallowed sound to indicate that TAP actions are not supported.
                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                am.playSoundEffect(Sounds.DISALLOWED);
            }
        });
        setContentView(mCardScroller);
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        Drawable mtitle = getResources().getDrawable(R.drawable.titlemoon);
        View view = new CardBuilder(getApplicationContext(), CardBuilder.Layout.CAPTION)
                .addImage(mtitle)
                //.setIcon(R.drawable.ic_spellcheck)
                //.setText(R.string.title_activity_ocr)
                .setFootnote(R.string.ocr_menu_description)
                .getView();

        return view;

        /*View view = new CardBuilder(this, CardBuilder.Layout.EMBED_INSIDE)
                .setEmbeddedLayout(R.layout.main_view)
                .getView();

        TextView textView1 = (TextView) view.findViewById(R.id.textView);
        Typeface tf = Typeface.createFromAsset(getAssets(),
                "fonts/Calibri.ttf");
        textView1.setTypeface(tf);
        textView1.setText("Swipe forward to take a picture");

        return view;*/
    }


    ////////////////////// GESTURES ///////////////////////////////
    @Override
    public boolean onGenericMotionEvent(MotionEvent event) {
        if (mGestureDetector != null) {
            return mGestureDetector.onMotionEvent(event);
        }
        return false;
    }




    ////////////////////// PICTURE PROCESSING ///////////////////////////////
    private static final int TAKE_PICTURE_REQUEST = 1;

    private void takePicture() {
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        startActivityForResult(intent, TAKE_PICTURE_REQUEST);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == TAKE_PICTURE_REQUEST && resultCode == RESULT_OK) {
            stopCameraPreview();
            String thumbnailPath = data.getStringExtra(Intents.EXTRA_THUMBNAIL_FILE_PATH);
            String picturePath = data.getStringExtra(Intents.EXTRA_PICTURE_FILE_PATH);
            Log.d("OCR", "the picture will be saved to: " + picturePath);
            mProgressDialog.setMessage("Saving Image...");
            //Set the current progress to zero
            mProgressDialog.setProgress(50);
            //Display the progress dialog
            mProgressDialog.show();
            processPictureWhenReady(picturePath);
            // TODO: Show the thumbnail to the user while the full picture is being
            // processed.

        }

        super.onActivityResult(requestCode, resultCode, data);
    }

    private void processPictureWhenReady(final String picturePath) {
        final File pictureFile = new File(picturePath);

        if (pictureFile.exists()) {
            // The picture is ready; process it.
            // SEBTEST: DO OCR HERE
            mProgressDialog.hide();
            Log.d("OCR", "Picture ready");
            OCRRequest request = new OCRRequest(this, getApplicationContext());
            request.execute(picturePath);

        } else {
            // The file does not exist yet. Before starting the file observer, you
            // can update your UI to let the user know that the application is
            // waiting for the picture (for example, by displaying the thumbnail
            // image and a progress indicator).

            final File parentDirectory = pictureFile.getParentFile();
            FileObserver observer = new FileObserver(parentDirectory.getPath(),
                    FileObserver.CLOSE_WRITE | FileObserver.MOVED_TO) {
                // Protect against additional pending events after CLOSE_WRITE
                // or MOVED_TO is handled.
                private boolean isFileWritten;

                @Override
                public void onEvent(int event, String path) {
                    if (!isFileWritten) {
                        // For safety, make sure that the file that was created in
                        // the directory is actually the one that we're expecting.
                        File affectedFile = new File(parentDirectory, path);
                        isFileWritten = affectedFile.equals(pictureFile);

                        if (isFileWritten) {
                            stopWatching();

                            // Now that the file is ready, recursively call
                            // processPictureWhenReady again (on the UI thread).
                            runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    processPictureWhenReady(picturePath);
                                }
                            });
                        }
                    }
                }
            };
            observer.startWatching();
        }
    }


    private GestureDetector createGestureDetector(Context context) {
        GestureDetector gestureDetector = new GestureDetector(context);
        //Create a base listener for generic gestures
        gestureDetector.setBaseListener(new GestureDetector.BaseListener() {
            @Override
            public boolean onGesture(Gesture gesture) {
                Log.e("tag", gesture.name());
                if (gesture == Gesture.LONG_PRESS) {
                    // do something on tap
                    toggleCamera();
                } else if (gesture == Gesture.TWO_TAP) {
                    // take picture and do OCR
                    return true;
                } else if (gesture == Gesture.SWIPE_RIGHT) {
                    // do something on right (forward) swipe
                   // stopCameraPreview();
                    takePicture();
                    return true;
                } else if (gesture == Gesture.SWIPE_LEFT) {
                    // do something on left (backwards) swipe
                    return true;
                }
                return false;
            }
        });

        return gestureDetector;
    }

    public void toggleCamera(){
        if(mCameraView == null){
            Log.d(getLocalClassName(), "Starting camera preview");
            mCameraView = new CameraView(this);
            setContentView(mCameraView);
        }else{
            // Stop camera and return back to main layout
            stopCameraPreview();
        }
    }

    public void stopCameraPreview(){
        Log.d(getLocalClassName(), "Stopping camera preview");
        if(mCameraView != null) {
            mCameraView.releaseCamera();
            mCameraView = null;
            setContentView(mCardScroller);
        }
    }

    public void transitionToSpellcheck(List results, Intent intent) {
        Bundle params = new Bundle();
        ArrayList<String> ocrResults = new ArrayList<String>();
        ocrResults.addAll(results);
        params.putStringArrayList("ocrResults", ocrResults);
        intent.putExtras(params);
        startActivity(intent);

    }
}


class OCRRequest extends AsyncTask<String /*params*/, String /*progress*/, String/*result*/> {
    private String url="https://ocr.a9t9.com/api/Parse/Image";
    private ProgressDialog mProgressDialog;
    private Intent intent;
    private OCRActivity ocrActivity;

    public OCRRequest(OCRActivity activity, Context context) {
        mProgressDialog = new ProgressDialog(activity);
        mProgressDialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
        mProgressDialog.setTitle("Loading...");
        mProgressDialog.setCancelable(false);
        mProgressDialog.setIndeterminate(false);
        mProgressDialog.setMax(100);

        ocrActivity = activity;
        intent = new Intent(context, SpellcheckActivity.class);
    }

    @Override
    protected void onPreExecute() {
        Log.d("OCR","onpreExecute");
        mProgressDialog.setMessage("Starting OCR Request...");
        mProgressDialog.setCancelable(false);
        mProgressDialog.setProgress(33);
        mProgressDialog.show();
        //Display the progress dialog
    }
    @Override
    protected String doInBackground(String... uri) {
        Log.d("OCR", "performing http POST with picture " + uri[0]);
        // uri[0] will contain the picture path
        HttpClient httpclient = new DefaultHttpClient();
        HttpPost httpPost = new HttpPost(url);
        HttpResponse response;
        String responseString = null;
        MultipartEntityBuilder builder = MultipartEntityBuilder.create();
        builder.addTextBody("apiKey", "helloworld", ContentType.TEXT_PLAIN);
        builder.addBinaryBody("file", new File(uri[0]), ContentType.APPLICATION_OCTET_STREAM, uri[0].substring(uri[0].lastIndexOf("/") + 1));
        builder.addTextBody("language", "eng", ContentType.TEXT_PLAIN);
        HttpEntity multipart = builder.build();
        httpPost.setEntity(multipart);
        mProgressDialog.show();
        mProgressDialog.setMessage("Receiving OCR Response...");
        mProgressDialog.setProgress(66);
        try {

            response = httpclient.execute(httpPost);
            StatusLine statusLine = response.getStatusLine();
            if(statusLine.getStatusCode() == HttpStatus.SC_OK){
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                response.getEntity().writeTo(out);
                responseString = out.toString();
                Log.d("OCR", "response: " + out);
                out.close();
            } else{
                //Closes the connection.
                Log.d("OCR", "BAD response: " + statusLine.getReasonPhrase());
                response.getEntity().getContent().close();
                throw new IOException(statusLine.getReasonPhrase());
            }
        } catch (ClientProtocolException e) {
            //TODO Handle problems..
            Log.d("OCR", e.getMessage());
        } catch (IOException e) {
            //TODO Handle problems..
            Log.d("OCR", e.getMessage());
        }
        Log.d("OCR","ocr result is " +  responseString);
        return responseString;
    }

    @Override
    protected void onPostExecute(String result) {
        mProgressDialog.hide();
        super.onPostExecute(result);
        //Do anything with response..
        Log.d("OCR", "Implement a transition here?");

        try {
            JSONObject resObj = new JSONObject(result);
            JSONArray parsedRes = new JSONArray(resObj.getString("ParsedResults"));
            JSONObject parsedResults = parsedRes.getJSONObject(0);
            if(resObj.getBoolean("IsErroredOnProcessing")) {
                // error occured in parsing - handle it
                return;
            }

            String res = parsedResults.getString("ParsedText");
            res = res.replaceAll("[\n\r]", ""); // Get rid of escape characters
            List<String> results = Arrays.asList(res.split(" "));
            ocrActivity.transitionToSpellcheck(results, intent);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
}